services:
  nginx:
    image: nginx:1.23.4-alpine
    container_name: queue-webserver
    ports:
      - "8080:80"
    volumes:
      - ./docker/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./docker/nginx/default.conf:/etc/nginx/conf.d/default.conf:ro
      - ./reference_files:/var/www/phpapp/storage/app/reference_files:ro
    tty: true
    restart: always
    extra_hosts:
      - host.docker.internal:host-gateway
    networks:
      - queue-network
    depends_on:
      - queue-frontend
      - queue-backend

  queue-frontend:
    container_name: queue-vue
    build:
      dockerfile: ./vueapp/Dockerfile
    image: queue-vue-image
    tty: true
    command: /bin/sh -c "while :; do sleep 10; done"
    environment:
      PORT: "8090"
      HOST: "0.0.0.0"
    ports:
      - "4100:8090"
    volumes:
      - ./vueapp:/vueapp
    networks:
      - queue-network

  queue-backend:
    container_name: queue-php
    build:
      context: ./phpapp
      dockerfile: Dockerfile
      args:
        WWWGROUP: "33"
    image: queue-php-image
    tty: true
    extra_hosts:
      - host.docker.internal:host-gateway
    environment:
      XDEBUG_MODE: "${SAIL_XDEBUG_MODE:-off}"
      XDEBUG_CONFIG: "${SAIL_XDEBUG_CONFIG:-client_host=host.docker.internal}"
    volumes:
      - ./phpapp/src:/var/www/phpapp
      - ./phpapp/php.ini:/usr/local/etc/php/php.ini
      - ./reference_files:/var/www/phpapp/storage/app/reference_files
    working_dir: /var/www/phpapp
    networks:
      - queue-network
    ports:
      - "4101:8091"
      - "4102:8092"
    depends_on:
      - queue-redis

  queue-db:
    container_name: queue-db
    image: postgres:16
    volumes:
      - queue_pgdb_volume:/var/lib/postgresql/data
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: queuework
      PGDATA: /var/lib/postgresql/data
    networks:
      - queue-network
    ports:
      - "5433:5432"
  
  queue-redis:
    container_name: queue-redis
    image: redis:7-alpine
    command: redis-server --appendonly yes --requirepass "${REDIS_PASSWORD:-redispassword}"
    volumes:
      - queue_redis_volume:/data
    networks:
      - queue-network
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    restart: always

volumes:
  queue_pgdb_volume:
    external: true
  queue_redis_volume:
    driver: local

networks:
  queue-network:
    external: true
